name: Test PETSc with predefined matrix and vector
on:
  # Trigger tests on push
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-22.04
    container: ubuntu:22.04

    strategy:
      matrix:
        petsc_version: ["3.20.0", "3.20.1", "3.20.2"]
      fail-fast: false

    env:
      PYBIND11_VERSION: "2.11.1"
      HDF5_SERIES: "1.14"
      HDF5_PATCH: "2"
      HDF5_FIX: ""
      PETSC_ARCH: "linux-gnu-real64-32"
      PETSC_SLEPC_OPTFLAGS: "-O2"
      PETSC_SLEPC_DEBUGGING: "yes"
      PETSC_DIR: "/usr/local/petsc"
      PETSC_VERSION: ${{ matrix.petsc_version }}
      OPENBLAS_NUM_THREADS: 1
      OPENBLAS_VERBOSE: 0
      GMSH_VERSION: "4_11_1"
      PYTHONPATH: "/usr/local/lib"

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive && \
          apt-get -qq update && \
          apt-get -yq --with-new-pkgs -o Dpkg::Options::="--force-confold" upgrade && \
          apt-get -y install \
          clang \
          cmake \
          g++ \
          gfortran \
          libboost-dev \
          libboost-filesystem-dev \
          libboost-timer-dev \
          liblapack-dev \
          libopenblas-dev \
          ninja-build \
          pkg-config \
          python3-dev \
          python3-numpy \
          python3-pip \
          python3-scipy \
          python3-setuptools \
          wget && \
          apt-get clean && \
          rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

      - name: Test gfortran
        run: |
          gfortran -fallow-argument-mismatch --version && \
          gcc -O2 --version

      - name: Install mpich
        run: |
          apt-get update && \
          apt-get -y install mpich
          apt-get clean && \
          rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

      - name: Install MPI4py
        run: |
          pip3 install --no-cache-dir mpi4py

      - name: Install HDF5
        run: |
          wget -nc --quiet https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_SERIES}/hdf5-${HDF5_SERIES}.${HDF5_PATCH}/src/hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX}.tar.gz && \
          tar xfz hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX}.tar.gz && \
          cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release -DHDF5_ENABLE_PARALLEL=on -DHDF5_ENABLE_Z_LIB_SUPPORT=on -B build-dir-hdf5 -S hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX} && \
          cmake --build build-dir-hdf5 && \
          cmake --install build-dir-hdf5 && \
          rm -rf /tmp/*

      - name: Install PETSc
        run: |
          apt-get -qq update && \
          apt-get -y install bison flex && \
          wget -nc --quiet https://web.cels.anl.gov/projects/petsc/download/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz -O petsc-${PETSC_VERSION}.tar.gz && \
          mkdir -p ${PETSC_DIR} && tar -xf petsc-${PETSC_VERSION}.tar.gz -C ${PETSC_DIR} --strip-components 1 && \
          cd ${PETSC_DIR} && \
          # Real, 32-bit int
          ./configure \
          PETSC_ARCH=${PETSC_ARCH} \
          --COPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
          --CXXOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
          --FOPTFLAGS="${PETSC_SLEPC_OPTFLAGS}" \
          --with-64-bit-indices=no \
          --with-debugging=${PETSC_SLEPC_DEBUGGING} \
          --with-fortran-bindings=no \
          --with-shared-libraries \
          --download-metis \
          --download-mumps \
          --download-ptscotch \
          --download-scalapack \
          --download-superlu \
          --download-superlu_dist \
          --with-scalar-type=real \
          --with-precision=double && \
          make PETSC_DIR=${PETSC_DIR} PETSC_ARCH=${PETSC_ARCH} ${MAKEFLAGS} all && \
          cd src/binding/petsc4py && \
          PETSC_ARCH=${PETSC_ARCH} pip3 install --no-cache-dir .

      - name: Install git, pugi
        run: |
          apt-get update && \
          apt-get -y install git libpugixml-dev
          apt-get clean && \
          rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

      - name: Get Basix
        uses: actions/checkout@v4
        with:
          path: ./basix
          repository: FEniCS/basix
          ref: v0.7.0

      - name: Get DOLFINx
        uses: actions/checkout@v4
        with:
          path: ./dolfinx
          repository: FEniCS/dolfinx
          ref: v0.7.2

      - name: Install UFL, Basix, FFCx
        shell: bash -el {0}
        run: |
          cmake -G Ninja -B build-basix -DCMAKE_BUILD_TYPE="Release" -S ./basix/cpp/
          cmake --build build-basix --parallel 2
          cmake --install build-basix
          python3 -m pip install ./basix/python
          python3 -m pip install git+https://github.com/FEniCS/ufl.git@2023.2.0
          python3 -m pip install git+https://github.com/FEniCS/ffcx.git@v0.7.0

      - name: Configure C++ (DOLFINx)
        shell: bash -el {0}
        run: PETSC_DIR=${{ env.PETSC_DIR }} PETSC_ARCH=${{ env.PETSC_ARCH }} cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -B build-dolfinx -S ./dolfinx/cpp/

      - name: Build and install C++ library (dolfinx)
        shell: bash -el {0}
        run: |
          cmake --build build-dolfinx
          cmake --install build-dolfinx
      - name: Install pybind
        run: python3 -m pip install pybind11==${PYBIND11_VERSION}
      
      - name: Build Python interface (DOLFINx)
        shell: bash -el {0}
        run: PETSC_DIR=${{ env.PETSC_DIR }} PETSC_ARCH=${{ env.PETSC_ARCH }} BUILD_TYPE=Debug python3 -m pip -v install ./dolfinx/python/

      - name: Get Asimov-contact
        uses: actions/checkout@v4
        with:
          path: ./contact
          repository: Wells-Group/asimov-contact
          ref: main

      - name: Install contact (C++)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -B build-contact -S ./contact/cpp/
          ninja -C build-contact install

      - name: Install contact
        run: BUILD_TYPE="Debug" python3 -m pip -v install ./contact/python/

      - name: Install gmsh
        run: |
          git clone -b gmsh_${GMSH_VERSION} --single-branch --depth 1 https://gitlab.onelab.info/gmsh/gmsh.git && \
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_BUILD_DYNAMIC=1  -DENABLE_OPENMP=1 -B build-dir -S gmsh && \
          cmake --build build-dir && \
          cmake --install build-dir && \
          rm -rf /tmp/*

      - name: Run demos
        run: |
          cd ./contact/python/demos
          mkdir -p results
          mkdir -p meshes
          python3 compare_custom_snes_one_sided.py
          python3 compare_nitsche_snes.py
